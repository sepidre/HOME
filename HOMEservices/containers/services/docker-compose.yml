version: '3.8'

networks:
 proxy:
  external: true
 macvlan:
  name: macvlan
  driver: macvlan
  driver_opts:
    parent: eth0 #your ethernet interface
  ipam:
    config:
      - subnet: 192.168.1.0/24 # I use the same subnet as my LAN router.

secrets:
 authelia_jwt_secret:
  file: ${secrets}/authelia_jwt_secret
 authelia_session_secret:
  file: ${secrets}/authelia_session_secret
 authelia_mysql_password:
  file: ${secrets}/authelia_mysql_password
 authelia_notifier_smtp_password:
  file: ${secrets}/authelia_notifier_smtp_password
 authelia_duo_api_secret_key:
  file: ${secrets}/authelia_duo_api_secret_key

services:
 trae-pi:
  container_name: trae-pi
  domainname: ${domain_WAN}
  image: traefik:latest
  restart: unless-stopped
  security_opt:
   - no-new-privileges:true
  command:
   - --global.checkNewVersion=true
   - --global.sendAnonymousUsage=true
   - --entryPoints.http.address=:80
   - --entryPoints.https.address=:443
   # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
   - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
   - --entryPoints.traefik.address=:8080
   - --entryPoints.speak-pi-tcp01.address=:30033
   - --entryPoints.speak-pi-tcp02.address=:10011
   - --entryPoints.speak-pi-udp.address=:9987
   - --api=true
   #- --api.insecure=true
   #- --serversTransport.insecureSkipVerify=true
   - --log=true
   - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
   - --accessLog=true
   - --accessLog.filePath=/var/lib/traefik/traefik.log
   - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
   - --accessLog.filters.statusCodes=400-499
   - --providers.docker=true
   - --providers.docker.endpoint=unix:///var/run/docker.sock
   - --providers.docker.exposedByDefault=false
   # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services.
   - --entrypoints.https.http.tls.certresolver=dns-cloudflare
   - --entrypoints.https.http.tls.domains[0].main=${domain_WAN}
   - --entrypoints.https.http.tls.domains[0].sans=*.${domain_WAN}
   - --providers.docker.network=proxy
   - --providers.docker.swarmMode=false
   - --providers.file.directory=/var/lib/traefik/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
   - --providers.file.watch=true # Only works on top level files in the rules folder
   #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
   - --certificatesResolvers.dns-cloudflare.acme.email=${cloudflaremail}
   - --certificatesResolvers.dns-cloudflare.acme.storage=/var/lib/traefik/cert/acme.json
   - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
   - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53
   - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.0.0.1:53
   - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=0 # To delay DNS
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}
   CF_API_EMAIL: ${cloudflaremail}
   CF_API_KEY: ${cloudflareglobalapi}
  labels:
   - traefik.enable=true
   # HTTP-to-HTTPS Redirect
   - traefik.http.routers.http-catchall.entrypoints=http
   - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
   - traefik.http.routers.http-catchall.middlewares=redirect-to-https
   - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
   # HTTP Routers
   - traefik.http.routers.traefik-rtr.entrypoints=https
   - traefik.http.routers.traefik-rtr.rule=Host(`trae-pi.${domain_WAN}`)
   - traefik.http.routers.traefik-rtr.tls=true
   - traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare
   ## Services - API
   - traefik.http.routers.traefik-rtr.service=api@internal
   ## Middlewares
   #- traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file
  ports:
   - target: 80
     published: 80
   - target: 443
     published: 443
   - target: 8080
     published: 8080   
  volumes:
   - /var/run/docker.sock:/var/run/docker.sock
   - /etc/localtime:/etc/localtime:ro
   - ${dockermedia}/shared:/shared
   - ${dockermedia}/traefik/rules:/var/lib/traefik/rules
   - ${dockermedia}/traefik/cert/acme.json:/var/lib/traefik/cert/acme.json
   - ${dockermedia}/traefik/traefik.log:/var/lib/traefik/traefik.log
  networks:
   proxy:
    ipv4_address: 192.168.90.254 # You can specify a static IP
  dns:
   - 1.1.1.1

 auth-pi:
  container_name: auth-pi
  # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
  image: authelia/authelia:4.22
  restart: always
  networks:
   proxy:
    ipv4_address: 192.168.90.20 # You can specify a static IP
  volumes:
   - ${dockermedia}/auth-pi:/config
  ports:
   - target: 9091
     published: ${authelia_PORT}
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}
   AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt_secret
   AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session_secret
   AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE: /run/secrets/authelia_mysql_password
   AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/authelia_notifier_smtp_password
   AUTHELIA_DUO_API_SECRET_KEY_FILE: /run/secrets/authelia_duo_api_secret_key
  secrets:
   - authelia_jwt_secret
   - authelia_session_secret
   - authelia_mysql_password
   - authelia_notifier_smtp_password
   - authelia_duo_api_secret_key
  labels:
   - "traefik.enable=true"
   ## HTTP Routers
   - "traefik.http.routers.auth-pi-rtr.entrypoints=https"
   - "traefik.http.routers.auth-pi-rtr.rule=Host(`auth-pi.${domain_WAN}`)"
   ## Middlewares
   - "traefik.http.routers.auth-pi-rtr.middlewares=chain-authelia@file"
   ## HTTP Services
   - "traefik.http.routers.auth-pi-rtr.service=auth-pi-svc"
   - "traefik.http.services.auth-pi-svc.loadbalancer.server.port=9091"
   
 homeassistant:
  container_name: assi-pi
  image: "homeassistant/raspberrypi4-homeassistant:stable"
  volumes:
    - ${dockermedia}/assi-pi/config:/config
    - /etc/localtime:/etc/localtime:ro
  restart: unless-stopped
  ports:
   - target: 8123
     published: 8123
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8123"]
    interval: 30s
    timeout: 10s
    retries: 6
  network_mode: host
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}
  privileged: true

 nodered:
  container_name: nodered-pi
  image: "nodered/node-red:latest"
  volumes:
    - ${dockermedia}/nodered-pi:/data
    - /etc/localtime:/etc/localtime:ro
  restart: unless-stopped
  network_mode: host
  ports:
   - target: 1880
     published: 1880
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}

 zigbee:
  container_name: zig-pi
  image: "koenkk/zigbee2mqtt:latest"
  volumes:
    - ${dockermedia}/zig-pi:/app/data
    - /run/udev:/run/udev:ro
    - /etc/localtime:/etc/localtime:ro
  restart: unless-stopped
  ports:
   - target: 8124
     published: 8124
  network_mode: host
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}
  devices:
   - /dev/ttyACM0:/dev/ttyACM0

 speak-pi:
  image: ertagh/teamspeak3-server:latest-box
  container_name: speak-pi
  restart: always
  networks:
   proxy:
    ipv4_address: 192.168.90.50 # You can specify a static IP
  ports:
   - 9987:9987/udp
   - 10011:10011
   - 30033:30033
   - 10443:10443
  volumes:
   - ${dockermedia}/speak-pi:/teamspeak/save/
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}
   TS3SERVER_DB_PLUGIN: ts3db_mariadb
   TS3SERVER_DB_SQLCREATEPATH: create_mariadb
   TS3SERVER_DB_HOST: ${db_host}:${maria_db_port}
   TS3SERVER_DB_USER: ${webdav_user}
   TS3SERVER_DB_PASSWORD: ${webdav_password}
   TS3SERVER_DB_NAME: speak-pi
   TS3SERVER_DB_WAITUNTILREADY: 30
   TS3SERVER_LICENSE: accept
   TS_UPDATE: 1
   INIFILE: 1
  labels:
   - "traefik.enable=true"
   - "traefik.docker.network=proxy"
   #tcp01
   - "traefik.tcp.routers.speak-pi-rtr-tcp01.entrypoints=speak-pi-tcp01"
   - "traefik.tcp.routers.speak-pi-rtr-tcp01.rule=Host(`speak-pi.${domain_WAN}`)"
   - "traefik.tcp.routers.speak-pi-rtr-tcp01.service=speak-pi-tcp01"
   - "traefik.tcp.services.speak-pi-tcp01.loadbalancer.server.port=30033"
   #tcp02
   - "traefik.tcp.routers.speak-pi-rtr-tcp02.entrypoints=speak-pi-tcp02"
   - "traefik.tcp.routers.speak-pi-rtr-tcp02.rule=Host(`speak-pi.${domain_WAN}`)"
   - "traefik.tcp.routers.speak-pi-rtr-tcp02.service=speak-pi-tcp02"
   - "traefik.tcp.services.speak-pi-tcp02.loadbalancer.server.port=10011"
   #udp
   - "traefik.udp.routers.speak-pi-rtr-udp.entrypoints=speak-pi-udp"
   - "traefik.udp.routers.speak-pi-rtr-udp.rule=Host(`speak-pi.${domain_WAN}`)"
   - "traefik.udp.routers.speak-pi-rtr-udp.service=speak-pi-udp"
   - "traefik.udp.services.speak-pi-udp.loadbalancer.server.port=9987"
   #https
   - "traefik.http.routers.speak-pi-rtr.entrypoints=https"
   - "traefik.http.routers.speak-pi-rtr.rule=Host(`speak-pi.${domain_WAN}`)"
   - "traefik.http.routers.speak-pi-rtr.service=speak-pi-svc"
   - "traefik.http.services.speak-pi-svc.loadbalancer.server.port=10443"
   ## Middlewares
   - "traefik.http.routers.auth-pi-rtr.middlewares=chain-no-auth@file"

 speak-manger:
  image: "joni1802/ts3-manager"
  container_name: speak-manger
  restart: always  
  networks:
   proxy:
  depends_on:
   - speak-pi
  ports:
   - 97:8080
  environment:
   - WHITELIST=192.168.90.50,speak-pi.${domain_WAN}
   - JWT_SECRET=${speak-pi-token}
  labels:
   - "traefik.enable=true"
   ## HTTP Routers
   - "traefik.http.routers.speak-manger-pi.entrypoints=https"
   - "traefik.http.routers.speak-manger-pi.rule=Host(`speak-manger.${domain_WAN}`)"
   ## Middlewares
   - "traefik.http.routers.speak-manger-pi.middlewares=chain-no-auth@file"
   ## HTTP Services
   - "traefik.http.routers.speak-manger-pi.service=speak-manger-svc"
   - "traefik.http.services.speak-manger-svc.loadbalancer.server.port=97"

 phpmy-pi:
  image: phpmyadmin:latest
  container_name: phpmy-pi
  restart: unless-stopped
  environment:
   PMA_ARBITRARY: 1
   ##PMA_HOST: ${db_host}
   ##PMA_PORT: ${mysql_db_port}
   ##PMA_USER: root
   ##PMA_PASSWORD: ${mysql_db_root}
   PMA_ABSOLUTE_URI: https://phpmy-pi.${domain_WAN}/
  ports:
   - '${PHPMYADMIN_PORT}:80'
  labels:
   - "traefik.enable=true"
   ## HTTP Routers
   - "traefik.http.routers.phpmy-pi-rtr.entrypoints=https"
   - "traefik.http.routers.phpmy-pi-rtr.rule=Host(`phpmy-pi.${domain_WAN}`)"
   - "traefik.http.routers.phpmy-pi-rtr.tls=true"
   ## Middlewares
   - "traefik.http.routers.phpmy-pi-rtr.middlewares=chain-authelia@file"
   ## HTTP Services
   - "traefik.http.routers.phpmy-pi-rtr.service=phpmy-pi-svc"
   - "traefik.http.services.phpmy-pi-svc.loadbalancer.server.port=80"
  networks:
   proxy:

 orga-pi:
  container_name: orga-pi
  image: organizr/organizr:latest
  restart: unless-stopped
  ports:
   - '${ORGANIZER_PORT}:80'
  networks:
   - proxy
  security_opt:
   - no-new-privileges:true
  volumes:
   - ${dockermedia}/orga-pi:/config
   - /etc/localtime:/etc/localtime:ro
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   DNS1: ${cloudflareDNS}
  labels:
   - "traefik.enable=true"
   ## HTTP Routers
   - "traefik.http.routers.organizr-rtr.entrypoints=https"
   - "traefik.http.routers.organizr-rtr.rule=Host(`www.${domain_WAN}`)"
   ## Middlewares
   - "traefik.http.routers.organizr-rtr.middlewares=organizr-redirect@docker,chain-authelia@file"
   # Redirect non-www to www middleware
   - "traefik.http.middlewares.organizr-redirect.redirectregex.regex=^https?://${domain_WAN}/(.*)"
   - "traefik.http.middlewares.organizr-redirect.redirectregex.replacement=https://www.${domain_WAN}/$${1}"
   - "traefik.http.middlewares.organizr-redirect.redirectregex.permanent=true"
   ## HTTP Services
   - "traefik.http.routers.organizr-rtr.service=organizr-svc"
   - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

 glan-pi:
  image: jdreinhardt/glances:latest
  container_name: glan-pi
  restart: unless-stopped
  privileged: true
  ports:
   - '${glances_PORT}:61208'
  networks:
   - proxy
  security_opt:
   - no-new-privileges:true
  pid: host
  volumes:
   - ${dockermedia}/glan-pi:/etc/glances # Use this if you want to add a glances.conf file
   - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}
   # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
   GLANCES_OPT: "-w"
  labels:
   - traefik.enable=true
   ## HTTP Routers
   - traefik.http.routers.glan-pi-services01-rtr.entrypoints=https
   - traefik.http.routers.glan-pi-services01-rtr.rule=Host(`services01-glan.${domain_WAN}`)
   ## Middlewares
   - traefik.http.routers.glan-pi-services01-rtr.middlewares=chain-authelia@file
   ## HTTP Services
   - traefik.http.routers.glan-pi-services01-rtr.service=glan-pi-services01-svc
   - traefik.http.services.glan-pi-services01-svc.loadbalancer.server.port=61208

 agent:
  image: portainer/agent
  container_name: portainer_agent
  restart: unless-stopped
  environment:
   PUID: ${PUID}
   PGID: ${PGID}
   TZ: ${TZ}
  volumes:
   - /var/run/docker.sock:/var/run/docker.sock
   - /var/lib/docker/volumes:/var/lib/docker/volumes
  ports:
   - '0.0.0.0:${portainer_AGENT_PORT}:9001/tcp'

 hole-pi:
  container_name: hole-pi
  image: cbcrowe/pihole-unbound:latest
  hostname: hole-pi
  domainname: ${domain_WAN}
  networks:  
   macvlan:
    ipv4_address: ${localDNS}
   proxy:
  ports:
    - ${localDNS}:443:443/tcp
    - ${localDNS}:53:53/tcp
    - ${localDNS}:53:53/udp
    - ${localDNS}:80:80/tcp
    - 0.0.0.0:${pihole_PORT}:80/tcp
    # - 5335:5335/tcp # Uncomment to enable unbound access on local server
    # - 22/tcp # Uncomment to enable SSH
  environment:
    PUID: ${PUID}
    PGID: ${PGID}
    ServerIP: ${localDNS}
    TZ: ${TZ}
    WEBPASSWORD: ${pihole_password}
    REV_SERVER: ${pihole_REV_SERVER}
    REV_SERVER_TARGET: ${pihole_REV_SERVER_TARGET}
    REV_SERVER_DOMAIN: ${pihole_REV_SERVER_DOMAIN}
    REV_SERVER_CIDR: ${pihole_REV_SERVER_CIDR}
    DNS1: 127.0.0.1#5335 # Hardcoded to our Unbound server
    DNS2: 127.0.0.1#5335 # Hardcoded to our Unbound server
    DNSSEC: "true" # Enable DNSSEC
  volumes:
    - ${dockermedia}/pi-hole/data:/etc/pihole:rw
    - ${dockermedia}/pi-hole/dnsmasq:/etc/dnsmasq.d:rw
    - ${dockermedia}/pi-hole/pihole.log:/var/log/pihole.log
    - /etc/localtime:/etc/localtime:ro
    - ${dockermedia}/shared:/shared
  restart: unless-stopped
  cap_add:
   - NET_ADMIN
  labels:
   - traefik.enable=true
   - traefik.docker.network=proxy
   ## HTTP Routers
   - traefik.http.routers.hole-pi-rtr.entrypoints=https
   - traefik.http.routers.hole-pi-rtr.rule=Host(`hole-pi.${domain_WAN}`)
   ## Middlewares
   - "traefik.http.routers.hole-pi-rtr.middlewares=chain-authelia@file,hole-pi-pre"
   - "traefik.http.middlewares.hole-pi-pre.addprefix.prefix=/admin"
   ## HTTP Services
   - traefik.http.routers.hole-pi-rtr.service=hole-pi-svc
   - traefik.http.services.hole-pi-svc.loadbalancer.server.port=80

 redcomm-pi:
  container_name: redis-commander
  image: malitov/rpi-redis-commander:latest
  hostname: redcomm-pi
  domainname: ${domain_WAN}
  restart: always
  environment:
   REDIS_HOSTS: ${db_host}
   REDIS_PASSWORD: "${redis_db_pw}"
   REDIS_PORT: ${redis_db_port}
  networks: 
   proxy:
   default:
  labels:
   - traefik.enable=true
   - traefik.docker.network=proxy
   ## HTTP Routers
   - traefik.http.routers.redcomm-pi-rtr.entrypoints=https
   - traefik.http.routers.redcomm-pi-rtr.rule=Host(`redcomm-pi.${domain_WAN}`)
   ## Middlewares
   - "traefik.http.routers.redcomm-pi-rtr.middlewares=chain-authelia@file"
   ## HTTP Services
   - traefik.http.routers.redcomm-pi-rtr.service=redcomm-pi-svc
   - traefik.http.services.redcomm-pi-svc.loadbalancer.server.port=8081

 stat-pi:
  container_name: stat-pi
  image: statping/statping:latest
  hostname: stat-pi
  domainname: ${domain_WAN}
  restart: always
  networks:
   proxy:
   default:
  volumes:
   - ${dockermedia}/stat-pi/:/app
  environment:
   VIRTUAL_HOST: localhost
   VIRTUAL_PORT: 8080
   DB_HOST: ${db_host}:${maria_db_port}
   DB_USER: root
   DB_PASS: ${mysql_db_root}
   DB_DATABASE: stat-pi
   NAME: stat-pi
   DESCRIPTION: This is a Statping Docker Compose instance
  labels:
   - traefik.enable=true
   - traefik.docker.network=proxy
   ## HTTP Routers
   - traefik.http.routers.stat-pi-rtr.entrypoints=https
   - traefik.http.routers.stat-pi-rtr.rule=Host(`stat-pi.${domain_WAN}`)
   ## Middlewares
   - "traefik.http.routers.stat-pi-rtr.middlewares=chain-authelia@file"
   ## HTTP Services
   - traefik.http.routers.stat-pi-rtr.service=stat-pi-svc
   - traefik.http.services.stat-pi-svc.loadbalancer.server.port=8080

 serv01-doz-pi:
  container_name: serv01-doz-pi
  image: amir20/dozzle:latest
  hostname: serv01-doz-pi
  domainname: ${domain_WAN}
  volumes:
   - /var/run/docker.sock:/var/run/docker.sock
  networks:
   proxy:
  labels:
   - traefik.enable=true
   - traefik.docker.network=proxy
   ## HTTP Routers
   - traefik.http.routers.serv01-doz-pi-rtr.entrypoints=https
   - traefik.http.routers.serv01-doz-pi-rtr.rule=Host(`serv01-doz-pi.${domain_WAN}`)
   ## Middlewares
   - "traefik.http.routers.serv01-doz-pi-rtr.middlewares=chain-authelia@file"
   ## HTTP Services
   - traefik.http.routers.serv01-doz-pi-rtr.service=serv01-doz-pi-svc
   - traefik.http.services.serv01-doz-pi-svc.loadbalancer.server.port=8080
